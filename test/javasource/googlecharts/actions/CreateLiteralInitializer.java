// This file was generated by Mendix Modeler.
//
// WARNING: Only the following code will be retained when actions are regenerated:
// - the import list
// - the code between BEGIN USER CODE and END USER CODE
// - the code between BEGIN EXTRA CODE and END EXTRA CODE
// Other code you write will be lost the next time you deploy the project.
// Special characters, e.g., é, ö, à, etc. are supported in comments.

package googlecharts.actions;

import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import java.util.List;
import com.mendix.core.Core;
import com.mendix.logging.ILogNode;
import com.mendix.systemwideinterfaces.core.IContext;
import com.mendix.webui.CustomJavaAction;
import com.mendix.systemwideinterfaces.core.IMendixObject;

/**
 * JavaScript Literal Initializer for Google Charts.
 * https://developers.google.com/chart/interactive/docs/datatables_dataviews#javascriptliteral
 */
public class CreateLiteralInitializer extends CustomJavaAction<String>
{
	private IMendixObject __ParameterParameter1;
	private googlecharts.proxies.ChartDataSource ParameterParameter1;

	public CreateLiteralInitializer(IContext context, IMendixObject ParameterParameter1)
	{
		super(context);
		this.__ParameterParameter1 = ParameterParameter1;
	}

	@Override
	public String executeAction() throws Exception
	{
		this.ParameterParameter1 = __ParameterParameter1 == null ? null : googlecharts.proxies.ChartDataSource.initialize(getContext(), __ParameterParameter1);

		// BEGIN USER CODE
		ILogNode logger = Core.getLogger("GoogleCharts");
		IContext context = getContext();
		ArrayList<Object> values = new ArrayList<>();

		String literalOutput = "{\"rows\": [";
		
		List<IMendixObject> rows = Core.retrieveByPath(context, __ParameterParameter1, googlecharts.proxies.Row.MemberNames.rows.toString());
		List<IMendixObject> columns = Core.retrieveByPath(context, __ParameterParameter1, googlecharts.proxies.Column.MemberNames.cols.toString());
		
		for(IMendixObject row : rows){
			List<IMendixObject> cells = Core.retrieveByPath(context, row, googlecharts.proxies.Cell.MemberNames.c.toString());
			values = new ArrayList<>(); // clear values
			String format = "";
			
			for(IMendixObject cell : cells){
				if(cell.getValue(context, "StringValue") != null){
					Object stringValue = cell.getValue(context, "StringValue");
					logger.debug("stringValue = " + stringValue);
					values.add(stringValue);
				} else if(cell.getValue(context, "DateTimeValue") != null){
					// get DateTime value
					Object dateTimeValue = cell.getValue(context, "DateTimeValue");
					logger.debug("dateTimeValue = " + dateTimeValue);
					values.add(dateTimeValue);
					// check for formatting
					Object formatValue = cell.getValue(context, "format");
					if (formatValue != null) {
						format = formatValue.toString();
					}
				} else {
					Object decimalValue = cell.getValue(context, "DecimalValue");
					logger.debug("decimalValue = " + decimalValue);
					values.add(decimalValue);
				}
			}
			literalOutput += "{\"c\": [";
			for(Object value : values){
				if(value instanceof Date){
					/*
					DateFormat df = new SimpleDateFormat("MM/dd/yyyy");
					if(format != ""){
						df = new SimpleDateFormat(format);
					}
					jsonOutput += "{\"v\": \"" + df.format((Date)val) + "\"},";
					*/
					Date valueDate = (Date)value;
					Calendar cal = Calendar.getInstance();
				    cal.setTime(valueDate);
				    int year = cal.get(Calendar.YEAR);
				    int month = cal.get(Calendar.MONTH) + 1; // Jan = 0, Dec = 11
				    int day = cal.get(Calendar.DAY_OF_MONTH);
				    int hour = cal.get(Calendar.HOUR_OF_DAY);
				    int minute = cal.get(Calendar.MINUTE);
				    int second = cal.get(Calendar.SECOND);
				    int millisecond = cal.get(Calendar.MILLISECOND);
					literalOutput += "{\"v\": ne"+"w D"+"ate("+year+", "+month+", "+day+", "
				    +hour+", "+minute+", "+second+", "+millisecond+")},";
					
				} else if (!(value instanceof String)){
					literalOutput += "{\"v\": " + value + "},";
				} else {
					literalOutput += "{\"v\": \"" + value + "\"},";
				}
			}
			literalOutput = literalOutput.substring(0, literalOutput.length()-1);
			literalOutput += "]},";
		}
		literalOutput = literalOutput.substring(0, literalOutput.length()-2);
		literalOutput += "}]";

		literalOutput += ",\"cols\": [";
		
		for(IMendixObject column : columns){
			String columnType = column.getValue(context, "_type").toString().toLowerCase();
			literalOutput += "{\"label\": \"" + column.getValue(context, "label").toString() +"\",";
			literalOutput += "\"type\": \"" + columnType +"\"},";
		}
		literalOutput = literalOutput.substring(0, literalOutput.length()-1); // remove trailing comma
		
		literalOutput += "]}";
		
		return literalOutput;
		// END USER CODE
	}

	/**
	 * Returns a string representation of this action
	 */
	@Override
	public String toString()
	{
		return "CreateLiteralInitializer";
	}

	// BEGIN EXTRA CODE
	// END EXTRA CODE
}
